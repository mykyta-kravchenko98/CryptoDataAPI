// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: api/cryptodata_v1/cryptodata.proto

package cryptodata_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CryptoDataService_GetTop50Coins_FullMethodName = "/cryptodata_v1.CryptoDataService/GetTop50Coins"
)

// CryptoDataServiceClient is the client API for CryptoDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoDataServiceClient interface {
	GetTop50Coins(ctx context.Context, in *GetCryptoCoinsRequest, opts ...grpc.CallOption) (CryptoDataService_GetTop50CoinsClient, error)
}

type cryptoDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoDataServiceClient(cc grpc.ClientConnInterface) CryptoDataServiceClient {
	return &cryptoDataServiceClient{cc}
}

func (c *cryptoDataServiceClient) GetTop50Coins(ctx context.Context, in *GetCryptoCoinsRequest, opts ...grpc.CallOption) (CryptoDataService_GetTop50CoinsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CryptoDataService_ServiceDesc.Streams[0], CryptoDataService_GetTop50Coins_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cryptoDataServiceGetTop50CoinsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CryptoDataService_GetTop50CoinsClient interface {
	Recv() (*GetCryptoCoinsResponse, error)
	grpc.ClientStream
}

type cryptoDataServiceGetTop50CoinsClient struct {
	grpc.ClientStream
}

func (x *cryptoDataServiceGetTop50CoinsClient) Recv() (*GetCryptoCoinsResponse, error) {
	m := new(GetCryptoCoinsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CryptoDataServiceServer is the server API for CryptoDataService service.
// All implementations must embed UnimplementedCryptoDataServiceServer
// for forward compatibility
type CryptoDataServiceServer interface {
	GetTop50Coins(*GetCryptoCoinsRequest, CryptoDataService_GetTop50CoinsServer) error
	mustEmbedUnimplementedCryptoDataServiceServer()
}

// UnimplementedCryptoDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCryptoDataServiceServer struct {
}

func (UnimplementedCryptoDataServiceServer) GetTop50Coins(*GetCryptoCoinsRequest, CryptoDataService_GetTop50CoinsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTop50Coins not implemented")
}
func (UnimplementedCryptoDataServiceServer) mustEmbedUnimplementedCryptoDataServiceServer() {}

// UnsafeCryptoDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoDataServiceServer will
// result in compilation errors.
type UnsafeCryptoDataServiceServer interface {
	mustEmbedUnimplementedCryptoDataServiceServer()
}

func RegisterCryptoDataServiceServer(s grpc.ServiceRegistrar, srv CryptoDataServiceServer) {
	s.RegisterService(&CryptoDataService_ServiceDesc, srv)
}

func _CryptoDataService_GetTop50Coins_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCryptoCoinsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CryptoDataServiceServer).GetTop50Coins(m, &cryptoDataServiceGetTop50CoinsServer{stream})
}

type CryptoDataService_GetTop50CoinsServer interface {
	Send(*GetCryptoCoinsResponse) error
	grpc.ServerStream
}

type cryptoDataServiceGetTop50CoinsServer struct {
	grpc.ServerStream
}

func (x *cryptoDataServiceGetTop50CoinsServer) Send(m *GetCryptoCoinsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CryptoDataService_ServiceDesc is the grpc.ServiceDesc for CryptoDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cryptodata_v1.CryptoDataService",
	HandlerType: (*CryptoDataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTop50Coins",
			Handler:       _CryptoDataService_GetTop50Coins_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/cryptodata_v1/cryptodata.proto",
}
